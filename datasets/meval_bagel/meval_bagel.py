import json

import datalabs
from datalabs import get_task, TaskType
from datalabs.features import Sequence, Value

_DESCRIPTION = """\
Bagel is a meta-evaluation datasets in the data-to-text domain. It provides 
information about restaurants. Each sample in it consists of one meaning 
representation, multiple references, and utterances generated by different 
systems.
"""

_CITATION = """\
@inproceedings{mairesse-etal-2010-phrase,
    title = "Phrase-Based Statistical Language Generation Using Graphical Models and Active Learning",
    author = "Mairesse, Fran{\c{c}}ois  and
      Ga{\v{s}}i{\'c}, Milica  and
      Jur{\v{c}}{\'\i}{\v{c}}ek, Filip  and
      Keizer, Simon  and
      Thomson, Blaise  and
      Yu, Kai  and
      Young, Steve",
    booktitle = "Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics",
    month = jul,
    year = "2010",
    address = "Uppsala, Sweden",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/P10-1157",
    pages = "1552--1561",
}
"""

_TEST_DOWNLOAD_URL = "https://datalab-hub.s3.amazonaws.com/meval/bagel/test.jsonl"


class MevalBAGEL(datalabs.GeneratorBasedBuilder):
    def _info(self):
        features = datalabs.Features(
            {
                "source": Value("string"),
                "references": Sequence(Value("string")),
                "hypotheses": Sequence({
                    "system_name": Value("string"),
                    "hypothesis": Value("string")
                }
                ),
                "scores": Sequence({
                        "informativeness": Value("float64"),
                        "naturalness": Value("float64"),
                        "quality": Value("float64")
                })
            }
        )
        return datalabs.DatasetInfo(
            description=_DESCRIPTION,
            features=features,
            homepage="https://github.com/jeknov/EMNLP_17_submission",
            citation=_CITATION,
            languages=["en"],
            task_templates=[
                get_task(TaskType.nlg_meta_evaluation)(
                    source_column="source",
                    hypotheses_column="hypothesis",
                    references_column="references",
                    scores_column = "scores",
                )
            ]
        )

    def _split_generators(self, dl_manager):
        test_path = dl_manager.download_and_extract(_TEST_DOWNLOAD_URL)
        return [
            datalabs.SplitGenerator(
                name=datalabs.Split.TEST, gen_kwargs={"filepath": test_path}
            ),
        ]

    def _generate_examples(self, filepath):
        """ Generate BAGEL examples."""
        with open(filepath, "r", encoding="utf-8") as f:
            for id_, line in enumerate(f.readlines()):
                line = line.strip()
                line = json.loads(line)
                source, hypothesis, references, scores = line["source"], \
                                                         line["hypothesis"],\
                                                         line["references"],\
                                                         line["scores"]

                yield id_, {
                    "source": source,
                    "hypotheses": [{
                        "system_name": "Unknown",
                        "hypothesis": hypothesis,
                    }],
                    "scores": [scores],
                    "references": references,
                }
